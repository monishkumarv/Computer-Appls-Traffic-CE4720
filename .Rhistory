attd = attitude
pairs(attitude, main = "attitude data")
cor(attitude) # be careful ---> make sure there is no high correlation among X's
fm <- lm(rating ~ complaints, data = attitude)
summary(fm)
fm <- lm(rating ~ complaints + privileges + learning, data = attitude)
summary(fm)
fm <- lm(rating ~ complaints * privileges + learning, data = attitude)
summary(fm)
library(mlogit)
crashdata = read.csv('mini-project/filtered-data.csv',header = TRUE)
crashdata.wide = mlogit.data(crashdata, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
setwd("C:/Users/Monish Kumar/R projects/L slot")
library(mlogit)
crashdata = read.csv('mini-project/filtered-data.csv',header = TRUE)
crashdata.wide = mlogit.data(crashdata, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
AGGRESSIVE_DRIVING +
MC_DRINKING_DRIVER + DRINKING_DRIVER +
PED_COUNT + SMALL_VEH_COUNT + MEDIUM_VEH_COUNT + LARGE_VEH_COUNT +
HIT_BRIDGE + HIT_DEER + HIT_EMBANKMENT + HIT_FIXED_OBJECT + HIT_GDRAIL + HIT_GDRAIL_END +
HIT_POLE + HIT_TREE_SHRUB + HIT_BARRIER +
CROSS_MEDIAN + SV_RUN_OFF_RD +
DISTRACTED + SPEEDING + UNBELTED + FIRE_IN_VEHICLE + OVERTURNED +
REAR_END_COLLISION + HEAD_ON_COLLISION + REAR2REAR_COLLISION +
ANGLE_COLLISION + SIDESWEEP_COLLISION,
data = crashdata.wide, reflevel = '0'))
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
PED_COUNT + SMALL_VEH_COUNT * MEDIUM_VEH_COUNT * LARGE_VEH_COUNT + UNBELTED
,
data = crashdata.wide, reflevel = '0'))
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
library(mlogit)
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
attach(crashdata.combined)
chisq.test(AGGRESSIVE_DRIVING~MAX_SEVERITY_LEVEL)
chisq.test(AGGRESSIVE_DRIVING,MAX_SEVERITY_LEVEL)
chisq.test(DISTRACTED,MAX_SEVERITY_LEVEL)
chisq.test(SIDESWEEP_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(MC_DRINKING_DRIVER,MAX_SEVERITY_LEVEL)
chisq.test(DRINKING_DRIVER,MAX_SEVERITY_LEVEL)
chisq.test(PED_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(SMALL_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(MEDIUM_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(LARGE_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(MAX_SEVERITY_LEVEL,LARGE_VEH_COUNT)
chisq.test(LARGE_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(HIT_BRIDGE,MAX_SEVERITY_LEVEL)
chisq.test(HIT_DEER,MAX_SEVERITY_LEVEL)
chisq.test(HIT_EMBANKMENT,MAX_SEVERITY_LEVEL)
chisq.test(HIT_GDRAIL,MAX_SEVERITY_LEVEL)
chisq.test(HIT_GDRAIL_END,MAX_SEVERITY_LEVEL)
chisq.test(HIT_POLE,MAX_SEVERITY_LEVEL)
chisq.test(HIT_TREE_SHRUB,MAX_SEVERITY_LEVEL)
chisq.test(HIT_BARRIER,MAX_SEVERITY_LEVEL)
chisq.test(CROSS_MEDIAN,MAX_SEVERITY_LEVEL)
chisq.test(SV_RUN_OFF_RD,MAX_SEVERITY_LEVEL)
chisq.test(DISTRACTED,MAX_SEVERITY_LEVEL)
chisq.test(SPEEDING,MAX_SEVERITY_LEVEL)
chisq.test(UNBELTED,MAX_SEVERITY_LEVEL)
chisq.test(FIRE_IN_VEHICLE,MAX_SEVERITY_LEVEL)
chisq.test(OVERTURNED,MAX_SEVERITY_LEVEL)
chisq.test(REAR_END_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(HEAD_ON_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(REAR2REAR_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(ANGLE_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(SIDESWEEP_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(HIT_GDRAIL_END,MAX_SEVERITY_LEVEL)
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
attach(crashdata.combined)
chisq.test(ILLUMINATION,MAX_SEVERITY_LEVEL)
chisq.test(ROAD_CONDITION,MAX_SEVERITY_LEVEL)
chisq.test(WEATHER,MAX_SEVERITY_LEVEL)
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
attach(crashdata.combined)
chisq.test(INTERSECT_TYPE,MAX_SEVERITY_LEVEL)
library(mlogit)
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
attach(crashdata.combined)
chisq.test(REAR_END_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(HEAD_ON_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(REAR2REAR_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(ANGLE_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(SIDESWEEP_COLLISION,MAX_SEVERITY_LEVEL)
chisq.test(AGGRESSIVE_DRIVING,MAX_SEVERITY_LEVEL)
chisq.test(MC_DRINKING_DRIVER,MAX_SEVERITY_LEVEL)
chisq.test(DRINKING_DRIVER,MAX_SEVERITY_LEVEL)
chisq.test(PED_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(SMALL_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(MEDIUM_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(LARGE_VEH_COUNT,MAX_SEVERITY_LEVEL)
chisq.test(CROSS_MEDIAN,MAX_SEVERITY_LEVEL)
chisq.test(SV_RUN_OFF_RD,MAX_SEVERITY_LEVEL)
chisq.test(DISTRACTED,MAX_SEVERITY_LEVEL)
chisq.test(SPEEDING,MAX_SEVERITY_LEVEL)
chisq.test(UNBELTED,MAX_SEVERITY_LEVEL)
chisq.test(FIRE_IN_VEHICLE,MAX_SEVERITY_LEVEL)
chisq.test(OVERTURNED,MAX_SEVERITY_LEVEL)
chisq.test(CELL_PHONE,MAX_SEVERITY_LEVEL)
chisq.test(FATIGUE_ASLEEP,MAX_SEVERITY_LEVEL)
cols = c(AGGRESSIVE_DRIVING ,
MC_DRINKING_DRIVER , DRINKING_DRIVER ,
PED_COUNT , SMALL_VEH_COUNT , MEDIUM_VEH_COUNT , LARGE_VEH_COUNT ,
HIT_BRIDGE , HIT_DEER , HIT_EMBANKMENT , HIT_GDRAIL , HIT_GDRAIL_END ,
HIT_POLE , HIT_TREE_SHRUB ,
CROSS_MEDIAN , SV_RUN_OFF_RD ,
DISTRACTED , SPEEDING , UNBELTED , FATIGUE_ASLEEP ,
FIRE_IN_VEHICLE , OVERTURNED ,
REAR_END_COLLISION , HEAD_ON_COLLISION , ANGLE_COLLISION , SIDESWEEP_COLLISION)
cols[0]
cols
cols = list(AGGRESSIVE_DRIVING ,
MC_DRINKING_DRIVER , DRINKING_DRIVER ,
PED_COUNT , SMALL_VEH_COUNT , MEDIUM_VEH_COUNT , LARGE_VEH_COUNT ,
HIT_BRIDGE , HIT_DEER , HIT_EMBANKMENT , HIT_GDRAIL , HIT_GDRAIL_END ,
HIT_POLE , HIT_TREE_SHRUB ,
CROSS_MEDIAN , SV_RUN_OFF_RD ,
DISTRACTED , SPEEDING , UNBELTED , FATIGUE_ASLEEP ,
FIRE_IN_VEHICLE , OVERTURNED ,
REAR_END_COLLISION , HEAD_ON_COLLISION , ANGLE_COLLISION , SIDESWEEP_COLLISION)
cols[0]
cols[1:2]
cols[1]
cols[2]
cols = c(AGGRESSIVE_DRIVING ,
MC_DRINKING_DRIVER , DRINKING_DRIVER ,
PED_COUNT , SMALL_VEH_COUNT , MEDIUM_VEH_COUNT , LARGE_VEH_COUNT ,
HIT_BRIDGE , HIT_DEER , HIT_EMBANKMENT , HIT_GDRAIL , HIT_GDRAIL_END ,
HIT_POLE , HIT_TREE_SHRUB ,
CROSS_MEDIAN , SV_RUN_OFF_RD ,
DISTRACTED , SPEEDING , UNBELTED , FATIGUE_ASLEEP ,
FIRE_IN_VEHICLE , OVERTURNED ,
REAR_END_COLLISION , HEAD_ON_COLLISION , ANGLE_COLLISION , SIDESWEEP_COLLISION)
cols[1]
cols = list(AGGRESSIVE_DRIVING ,
MC_DRINKING_DRIVER , DRINKING_DRIVER ,
PED_COUNT , SMALL_VEH_COUNT , MEDIUM_VEH_COUNT , LARGE_VEH_COUNT ,
HIT_BRIDGE , HIT_DEER , HIT_EMBANKMENT , HIT_GDRAIL , HIT_GDRAIL_END ,
HIT_POLE , HIT_TREE_SHRUB ,
CROSS_MEDIAN , SV_RUN_OFF_RD ,
DISTRACTED , SPEEDING , UNBELTED , FATIGUE_ASLEEP ,
FIRE_IN_VEHICLE , OVERTURNED ,
REAR_END_COLLISION , HEAD_ON_COLLISION , ANGLE_COLLISION , SIDESWEEP_COLLISION)
cols[1]
chisq.test(i,j)
for (i in cols){
for(j in cols){
chisq.test(i,j)
}
}
print(chisq.test(i,j))
chisq.test(i,j)
a = list()
for (i in cols){
for(j in cols){
append(a,chisq.test(i,j))
}
}
a[1]
a = list()
for (i in cols){
for(j in cols){
a = append(a,chisq.test(i,j))
}
}
a[1]
summary(a[1])
a = c()
for (i in cols){
for(j in cols){
a = append(a,chisq.test(i,j))
}
}
a[1]
b = chisq.test(UNBELTED,FATIGUE_ASLEEP)
b
b$p.value
b$data.name
print(2,3)
"ww"+"23"
print(list(2,3))
a = c()
for (i in cols){
for(j in cols){
chi = chisq.test(i,j)
print(chi$data.name)
print(chi$p.value)
}
}
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
AGGRESSIVE_DRIVING +
MC_DRINKING_DRIVER + DRINKING_DRIVER +
PED_COUNT + SMALL_VEH_COUNT + MEDIUM_VEH_COUNT + LARGE_VEH_COUNT +
HIT_BRIDGE + HIT_DEER + HIT_EMBANKMENT + HIT_GDRAIL + HIT_GDRAIL_END +
HIT_POLE + HIT_TREE_SHRUB +
CROSS_MEDIAN + SV_RUN_OFF_RD +
DISTRACTED + SPEEDING + UNBELTED + FATIGUE_ASLEEP +
FIRE_IN_VEHICLE + OVERTURNED +
REAR_END_COLLISION + HEAD_ON_COLLISION + ANGLE_COLLISION + SIDESWEEP_COLLISION ,
data = crashdata.combined.wide, reflevel = '0'))
library(mlogit)
crashdata = read.csv('mini-project/filtered-data.csv',header = TRUE)
crashdata.wide = mlogit.data(crashdata, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
library(mlogit)
crashdata.combined = read.csv('mini-project/filtered-data-combined.csv',header = TRUE)
crashdata.combined.wide = mlogit.data(crashdata.combined, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
AGGRESSIVE_DRIVING +
MC_DRINKING_DRIVER + DRINKING_DRIVER +
PED_COUNT + SMALL_VEH_COUNT + MEDIUM_VEH_COUNT + LARGE_VEH_COUNT +
HIT_BRIDGE + HIT_DEER + HIT_EMBANKMENT + HIT_GDRAIL + HIT_GDRAIL_END +
HIT_POLE + HIT_TREE_SHRUB +
CROSS_MEDIAN + SV_RUN_OFF_RD +
DISTRACTED + SPEEDING + UNBELTED + FATIGUE_ASLEEP +
FIRE_IN_VEHICLE + OVERTURNED +
REAR_END_COLLISION + HEAD_ON_COLLISION + ANGLE_COLLISION + SIDESWEEP_COLLISION,
data = crashdata.wide, reflevel = '0'))
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
AGGRESSIVE_DRIVING +
MC_DRINKING_DRIVER + DRINKING_DRIVER +
PED_COUNT + SMALL_VEH_COUNT + MEDIUM_VEH_COUNT + LARGE_VEH_COUNT +
HIT_BRIDGE + HIT_DEER + HIT_EMBANKMENT + HIT_GDRAIL + HIT_GDRAIL_END +
HIT_POLE + HIT_TREE_SHRUB +
CROSS_MEDIAN + SV_RUN_OFF_RD +
DISTRACTED + SPEEDING + UNBELTED + FATIGUE_ASLEEP +
FIRE_IN_VEHICLE + OVERTURNED +
REAR_END_COLLISION + HEAD_ON_COLLISION + ANGLE_COLLISION + SIDESWEEP_COLLISION ,
data = crashdata.combined.wide, reflevel = '0'))
library(mlogit)
crashdata = read.csv('mini-project/filtered-data.csv',header = TRUE)
crashdata.wide = mlogit.data(crashdata, shape = "wide", choice = "MAX_SEVERITY_LEVEL")
summary(mlogit(MAX_SEVERITY_LEVEL ~ 1 |
AGGRESSIVE_DRIVING +
MC_DRINKING_DRIVER + DRINKING_DRIVER +
PED_COUNT + SMALL_VEH_COUNT + MEDIUM_VEH_COUNT + LARGE_VEH_COUNT +
HIT_BRIDGE + HIT_DEER + HIT_EMBANKMENT + HIT_GDRAIL + HIT_GDRAIL_END +
HIT_POLE + HIT_TREE_SHRUB +
CROSS_MEDIAN + SV_RUN_OFF_RD +
DISTRACTED + SPEEDING + UNBELTED + FATIGUE_ASLEEP +
FIRE_IN_VEHICLE + OVERTURNED +
REAR_END_COLLISION + HEAD_ON_COLLISION + ANGLE_COLLISION + SIDESWEEP_COLLISION,
data = crashdata.wide, reflevel = '0'))
